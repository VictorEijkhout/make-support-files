# -*- makefile -*-
################################################################
####
#### top level Make include file
#### this probably needs to be included always.
####
################################################################

SHELL = bash
.PHONY: info moreinfo
info :: 
	@echo && echo "================ General info" 
	@echo "(make moreinfo for options)" && echo 
	@echo "make targets for ${PACKAGE}"
	@if [ -z "${MAKEINCLUDES}" ] ; then \
	    echo "Set MAKEINCLUDES to location of Make.stuff files" >2 \
	     && return 1 \
	 ; fi
	@if [ ! -z "${URL}" ] ; then echo "  homepage : open URL" ; fi
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" \
	 && if [ ! -d "$$srcdir" ] ; then \
	        echo "  source : $$srcdir (missing)" \
	    ; else \
	        echo "  source : $$srcdir" \
	    ; fi \
	 && sources= \
	 && for d in $${downloaddir}/$${packagebasename}-* ; do \
	        if [ -d "$$d" ] ; then sources="$${sources} $${d#*-}" ; fi \
	    ; done && echo "  available sources:$$sources" \
	 && if [ ! -z "${PREFIXEXTRA}" ] ; then \
	        installdir=$${installdir}-${PREFIXEXTRA} ; fi \
	 && echo "  install: $$installdir" \
	 && echo "  module dir: $$moduledir" \
	 && echo "    make list_installations for already present"
.PHONY: homepage url
homepage :
	@open ${URL}
url :
	@if [ ! -z "${URL}" ] ; then \
	    echo ${URL} ; else echo "No URL known" ; fi
.PHONY: list_installations
list_installations ::
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" \
	 && echo && echo "Already available installations in $${homedir}:" \
	 && ls -d $${homedir}/installation* 2>/dev/null || echo >/dev/null \
	 && make --no-print-directory moduleprint \
	 && echo

.PHONY: homedir
moreinfo ::
	@echo "make homedir : create home dir"
homedir :
	@if [ -z "${MAKEINCLUDES}" ] ; then \
	    echo "Set MAKEINCLUDES to location of Make.stuff files" \
	     && return 1 \
	 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" \
	 && requirenonzero homedir \
	 && if [ ! -d "$$homedir" ] ; then \
	    echo "First creating home dir for ${PACKAGE}" \
	     && mkdir -p "$$homedir" \
	    ; \
	fi
.PHONY: installdir
moreinfo ::
	@echo "make installdir : name of install dir"
installdir :
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} && export INSTALLROOT=${INSTALLROOT} \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" \
	 && echo $${installdir}

.PHONY: modules moduleversion moduleprint
info ::
	@echo "================ module stuff"
	@echo "    make modules : check if prereq modules are loaded"
modules ::
	@for m in ${MODULES} ; do \
	    M=`echo $$m | tr a-z A-Z` && lmd=LMOD_$${M}_DIR && tmd=TACC_$${M}_DIR \
	     && vt=`env | grep $${tmd} | cut -d = -f 2` \
	     && vl=`env | grep $${lmd} | cut -d = -f 2` \
	     && if [ ! -z "${ECHO}" ] ; then \
	            echo "Testing module: $$M; has $$tmd=<<$$vt>>" \
	        ; fi \
	     && if [ -z "$${vl}" -a -z "$${vt}" ] ; then \
	            echo "Please load module: $$m (from: ${MODULES})" && exit 1 \
	        ; fi \
	 ; done
	@for m in ${NONMODULES} ; do \
	    M=`echo $$m | tr a-z A-Z` && lmd=LMOD_$${M}_DIR && tmd=TACC_$${M}_DIR \
	     && vt=`env | grep $${tmd} | cut -d = -f 2` \
	     && vl=`env | grep $${lmd} | cut -d = -f 2` \
	     && if [ ! -z "$${vl}" -o ! -z "$${vt}" ] ; then \
	            echo "Incompatible module found: $$m (from: ${NONMODULES})" && exit 1 \
	        ; fi \
	 ; done
	@make --no-print-directory moduleversion
info ::
	@echo "    make moduleversion : test if all loaded modules are new enough"
moduleversion :
	@source ${BASH_ENV} \
	 && loaded=$$( for m in $$( module list 2>&1 | awk 'p==1 {print} /Currently/ {p=1}' ) ; do echo $$m ; done | awk '/\// {print}' | cut -d '/' -f 1 ) \
	 && for l in $$loaded ; do \
	      versionname=MODULE_MINIMUM_VERSION_$$l \
	       && minversion=$$( make -p | \grep $$versionname | tr -d ' ' | cut -d '=' -f 2 ) \
	       && if [ ! -z "$$minversion" ] ; then \
	            loadversion=$$( \
	                for m in $$( module list $$l 2>&1 ) ; do echo $$m ; done \
	                | awk '/\// {print}' \
	                | cut -d '/' -f 2 | cut -d '.' -f 1 \
	                ) \
	             && if [ $$loadversion -lt $$minversion ] ; then \
	                  echo "Module $$l has loaded $$loadversion, s/b at least $$minversion" \
                           && exit 1 \
	                ; fi \
	          ; fi \
	    ; done \
	 && for m in $( module list 2>&1 | awk 'p==1 {print} /Currently/ {p=1}' ) ; do echo $m ; done | awk '/'$SEEK'/ {print}' | cut -d '/' -f 2 | cut -d '.' -f 1
info ::
	@echo "    make moduleprint : print prereq modules"
moduleprint ::
	@if [ ! -z "${MODULES}" ] ; then \
	    echo && echo "Loaded prereq modules:" \
	     && for m in ${MODULES} ; do \
	            module list $$m 2>&1 \
	            | grep -v Matching | awk 'NF>0 {print}' \
	         ; done \
	 ; fi

.PHONY: ls findfile findstring installext ziplog
info ::
	@echo "================ utility stuff"
	@echo "    make ls [ LSPATH=.... relative to src ] [ PATTERN=... ( ls in src dir ) ]"
	@echo "    make findfile   FILE=..."
	@echo "    make findstring STRING=..."
	@echo "    make installext"
	@echo "    make ziplog"
ls :
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" \
	 && echo "ls $${srcdir}/${LSPATH} :" \
	 && ls $${srcdir}/${LSPATH}/${PATTERN}
findfile :
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" \
	 && find $$homedir -name \*${FILE}\*
findstring :
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" \
	 && find $$homedir -type f -exec grep -i "${STRING}" {} \; -print
installext :
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" \
	 && echo $$installext
ziplog :
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" \
	 && cmdline="zip $${packagebasename}_logs.zip $${configurelog} $${installlog}" \
	 && echo $$cmdline \
	 && eval $$cmdline
clean ::
	@rm -f *_logs.zip

.PHONY: clean
clean ::
	@rm -f *.log *~
