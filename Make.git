# -*- makefile -*-

.PHONY: git_info
git_info :: 
	@echo "================ Repository rules"
	@echo "make clone GITREPO=.... GITDATE=<null>/today/20240101 (or whatever)"
	@echo "make gitrepo ( list repo URL)"
info :: git_info
moreinfo :: git_info
	@echo "    [ GITPACKAGE=... for nonstandard unpack ]"
	@echo "    [ BRANCH=... (nonzero switches) ]"
	@echo "    [ SUBMODULE=... (nonzero for init and update) ]"
	@if [ -z "${GITREPO}" ] ; then \
	    echo "    WARNING: variable GITREPO not set" \
	 ; else \
	    echo "    ( currently using GITREPO=${GITREPO} )" \
	 ; fi
	@echo "     oneclone : non-recursive rule"
	@echo "     newclone : delete and reclone"

.PHONY: clone oneclone gitrepo
gitrepo :
	@echo "${GITREPO}"
clone newclone oneclone ::
	@if [ -z "${GITREPO}" ] ; then \
	    echo "Set variable GITREPO" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	 && homedir=$$( make --no-print-directory homedir \
	        TACC_SYSTEM=${TACC_SYSTEM} TACC_FAMILY_COMPILER=${TACC_FAMILY_COMPILER} \
	        PACKAGEROOT=${PACKAGEROOT} PACKAGE=${PACKAGE} PACKAGEVERSION=git \
	        HOMEDIR=${HOMEDIR} \
	        ) \
	 && reportnonzero homedir \
	 && packagenames "${PACKAGE}" "git" "${PACKAGEBASENAME}" \
         && echo "Cloning $${package}" \
	 && clonedir=$$( make --no-print-directory clonedir \
	        PACKAGE=$${package} GITDATE=${GITDATE} ) \
         && echo " .. into $${clonedir}" \
	 && echo " .. rm previous $${homedir}/$${package}-git* if present" \
	 && rm -rf $${homedir}/$${package}-git* \
	 \
	 && if [ ! -z "${DOWNLOADPATH}" ] ; then \
	    cd "${DOWNLOADPATH}" ; else cd $$homedir ; fi \
	 && echo " .. cloning in $$( pwd )" \
	 && if [ ! -d $${package} ] ; then \
	      cmdline="git clone ${CLONEARGS} ${GITREPO} $${clonedir}" \
	       && echo "cmdline=$$cmdline" && eval $$cmdline \
	    ; fi \
	 && if [ ! -z "${BRANCH}" ] ; then \
	            echo ".. switching to branch ${BRANCH}" \
	             && ( cd $${clonedir} && git checkout ${BRANCH} ) \
	    ; fi \
	 && if [ ! -z "${GITTAG}" ] ; then \
	        echo " .. checking out gittag: ${GITTAG}" \
	         && ( cd $${clonedir} && git checkout ${GITTAG} ) \
	        ; \
	    fi \
	 && if [ ! -z "${SUBMODULE}" ] ; then \
	            echo ".. loading submodules" \
	             && ( cd $${clonedir} \
	                   && git submodule update --init --recursive \
	                ) \
	    ; fi \
	 && if [ ! -z "${BOOTSTRAP}" ] ; then \
	            echo ".. bootstrapping" \
	             && ( cd $${clonedir} && eval ${BOOTSTRAP} ) \
	    ; fi

.PHONY: pull_info
pull_info :: 
	@echo "make pull : git pull on repo"
	@echo "    [ BRANCH=.... ]"
info :: pull_info
moreinfo :: pull_info
	@echo "    [ PULLAFTERACTIONS= (mods inside the repo) ]"

.PHONY: pull 
pull :: 
	@if [ -z "${GITREPO}" ] ; then \
	    echo "Set variable GITREPO" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	 && homedir=$$( make --no-print-directory homedir \
	        PACKAGE=${PACKAGE} PACKAGEVERSION=${PACKAGEVERSION} \
	        PACKAGEBASENAME=${PACKAGEBASENAME} HOMEDIR=${HOMEDIR} \
	        ) \
	 && requirenonzeropath homedir \
	 && setnames \
	    "${PACKAGE}"  "${PACKAGEVERSION}"  "${PACKAGEBASENAME}" \
	    "${DOWNLOADPATH}" "${SRCPATH}" \
	    "${INSTALLPATH}"  "${INSTALLROOT}"  "${INSTALLEXT}"  "${INSTALLVARIANT}" \
	    "${HOMEDIR}"  "${BUILDDIRROOT}"  "${MODE}" \
	    "${PREFIXOPTION}"  "${PREFIXEXTRA}" \
	 \
	 && requirenonzeropath srcdir \
	 && echo "Updating repo: $${srcdir}" \
	 && cd $${srcdir} \
	 && git pull \
	 && if [ ! -z "${BRANCH}" ] ; then \
	        echo "Checking out branch: ${BRANCH}" \
	         && git checkout ${BRANCH} \
	        ; \
	    fi \
	 && if [ ! -z "${GITTAG}" ] ; then \
	        echo "Checking out gittag: ${GITTAG}" \
	         && git checkout ${GITTAG} \
	        ; \
	    fi \
	 && if [ ! -z "${PULLAFTERACTIONS}" ] ; then \
	        echo ".. also doing: ${PULLAFTERACTIONS}" \
	         && cd $$srcdir \
	         && eval ${PULLAFTERACTIONS} \
	    ; fi

clone pull ::
	@if [ "${CHMODR}" = "1" ] ; then \
	    echo "setting permissions open" \
	     && source ${MAKEINCLUDES}/names.sh \
	     && setnames \
	    "${PACKAGE}"  "${PACKAGEVERSION}"  "${PACKAGEBASENAME}" \
	    "${DOWNLOADPATH}" "${SRCPATH}" \
	    "${INSTALLPATH}"  "${INSTALLROOT}"  "${INSTALLEXT}"  "${INSTALLVARIANT}" \
	    "${HOMEDIR}"  "${BUILDDIRROOT}"  "${MODE}" \
	    "${PREFIXOPTION}"  "${PREFIXEXTRA}" \
	     && requirenonzeropath downloaddir \
	     && requirenonzero package \
	     && chmod -R g+rX,o+rX $${downloaddir}/$${package}-git \
	 ; fi

info ::
	@echo "make list_branch"
.PHONY: list_branch
list_branch :
	@source ${MAKEINCLUDES}/names.sh \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" "${MODE}" \
	 && cd $$srcdir && git branch -a

info ::
	@echo "make betar : tgz the git directory"
.PHONY: betar
betar :
	@\
	source ${MAKEINCLUDES}/names.sh \
	 && homedir=$$( make --no-print-directory homedir \
	        PACKAGE=${PACKAGE} PACKAGEVERSION=${PACKAGEVERSION} \
	        PACKAGEBASENAME=${PACKAGEBASENAME} HOMEDIR=${HOMEDIR} \
	        ) \
	 && requirenonzeropath homedir \
	 && packagenames "${PACKAGE}" "${PACKAGEVERSION}" "${PACKAGEBASENAME}" "${GITDATE}" \
	 && srcname=$$( make --no-print-directory clonedir \
	                PACKAGE=$${packagebasename} GITDATE=${GITDATE} ) \
	 && tgtname=$$( make --no-print-directory srcdir \
	                PACKAGE=$${packagebasename} ) \
	 && cd "$${homedir}" \
	 && echo "Making repacked tar file from $${srcname}" \
	 && if [ ! -d "$$srcname" ] ; then \
	        echo "Error: download dir $${homedir} does not contain: $${srcname}" \
	         && exit 1 ; fi \
	 && if [ -d "$${tgtname}" ] ; then \
	        echo " .. rm old source dir <<$${tgtname}>>" \
	         && rm -rf "$${tgtname}" ; fi \
	 && cp -r "$${srcname}" "$${tgtname}" \
	 && if [ ! -z "${GITTAG}" ] ; then \
	      tgzname=$${packagebasename}-${GITTAG}.tgz \
	    ; else \
	      tgzname=$${srcname}.tgz \
	    ; fi \
	 && echo " .. repacking to <<$${tgzname}>>" \
	 && tar fcz "$${tgzname}" "$${tgtname}"
