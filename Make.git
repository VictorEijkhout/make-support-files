# -*- makefile -*-

.PHONY: git_info
git_info :: 
	@echo "================ Repository rules"
	@echo "make clone GITREPO=.... "
info :: git_info
moreinfo :: git_info
	@echo "    [ GITPACKAGE=... for nonstandard unpack ]"
	@echo "    [ BRANCH=... (nonzero switches) ]"
	@echo "    [ SUBMODULE=... (nonzero for init and update) ]"
	@if [ -z "${GITREPO}" ] ; then \
	    echo "    WARNING: variable GITREPO not set" \
	 ; else \
	    echo "    ( currently using GITREPO=${GITREPO} )" \
	 ; fi
	@echo "     oneclone : non-recursive rule"
	@echo "     newclone : delete and reclone"

.PHONY: clone oneclone
clone oneclone ::
	@if [ -z "${GITREPO}" ] ; then \
	    echo "Set variable GITREPO" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	 && if [ ! -z "${PACKAGEBASENAME}" ] ; then \
	        packagebasename=${PACKAGEBASENAME} \
	    ; else packagebasename=${PACKAGE} ; fi \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "$${packagebasename}" \
	 \
	 && package=$${package}-git \
	 && if [ ! -z "${GITPACKAGE}" ] ; then package=${GITPACKAGE} ; fi \
	 && echo "Establishing package=${PACKAGE}, version=${PACKAGEVERSION} into $${package}" \
	 \
	 && if [ ! -d $${downloaddir} ] ; then \
	        echo " .. first creating downloaddir=$${downloaddir}" \
	         && mkdir -p $${downloaddir} ; fi \
	 && if [ ! -d "$${downloaddir}" ] ; then \
	        echo "Invalid download dir: $$downloaddir" && exit 1 ; fi \
	 && cd "$${downloaddir}" \
	 && if [ -d $${downloaddir}/$${package} ] ; then \
	    echo ".. repo already in place: $${downloaddir}/$${package}" \
	    ; \
	else \
	    echo ".. cloning repo ${GITREPO} into $${downloaddir}/$${package}" \
	     && cd $${downloaddir} \
	     && git clone ${GITREPO} $${package} \
	     && if [ ! -z "${BRANCH}" ] ; then \
	            echo ".. switching to branch ${BRANCH}" \
	             && ( cd $${package} && git checkout ${BRANCH} ) \
	        ; fi \
	     && if [ ! -z "${SUBMODULE}" ] ; then \
	            echo ".. loading submodules" \
	             && ( cd $${package} \
	                   &&  git submodule init && git submodule update \
	                ) \
	        ; fi \
	     && if [ ! -z "${BOOTSTRAP}" ] ; then \
	            echo ".. bootstrapping" \
	             && ( cd $${package} && eval ${BOOTSTRAP} ) \
	        ; fi \
	    ; \
	fi

newclone ::
	@if [ -z "${GITREPO}" ] ; then \
	    echo "Set variable GITREPO" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" "${MODE}" \
	 \
	 && if [ ! -d "$${downloaddir}" ] ; then \
	        echo "Invalid download dir: $$downloaddir" && exit 1 ; fi \
	 \
	 && rm -rf $${downloaddir}/$${package}-git \
	 && echo "recloning...." \
	 && make --no-print-directory clone \
	        PACKAGEROOT=${PACKAGEROOT} PACKAGE=${PACKAGE} PACKAGEVERSION=${PACKAGEVERSION} \
	        BRANCH=${BRANCH} SUBMODULE=${SUBMODULE} BOOTSTRAP="${BOOTSTRAP}"

.PHONY: pull_info
pull_info :: 
	@echo "make pull : git pull on repo"
	@echo "    [ BRANCH=.... ]"
info :: pull_info
moreinfo :: pull_info
	@echo "    [ PULLAFTERACTIONS= (mods inside the repo) ]"

.PHONY: pull 
pull :: clone
	@if [ -z "${GITREPO}" ] ; then \
	    echo "Set variable GITREPO" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" "${MODE}" \
	 \
	 && echo "Updating repo: $${srcdir}" \
	 && cd $${srcdir} \
	 && git pull \
	 && if [ ! -z "${BRANCH}" ] ; then \
	        echo "Checking out branch: ${BRANCH}" \
	         && git checkout ${BRANCH} \
	        ; \
	    fi \
	 && if [ ! -z "${PULLAFTERACTIONS}" ] ; then \
	        echo ".. also doing: ${PULLAFTERACTIONS}" \
	         && cd $$srcdir \
	         && eval ${PULLAFTERACTIONS} \
	    ; fi

clone pull ::
	@if [ "${CHMODR}" = "1" ] ; then \
	    echo "setting permissions open" \
	     && source ${MAKEINCLUDES}/names.sh \
	     && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" "${MODE}" \
	     && chmod -R g+rX,o+rX $${downloaddir}/$${package}-git \
	 ; fi

info ::
	@echo "make list_branch"
.PHONY: list_branch
list_branch :
	@source ${MAKEINCLUDES}/names.sh \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" "${MODE}" \
	 && cd $$srcdir && git branch -a

info ::
	@echo "make betar : tgz the git directory"
.PHONY: betar
betar :
	@\
	source ${MAKEINCLUDES}/names.sh \
	 && setnames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" "${MODE}" \
	 && echo "Repacking tar file for $${package}-${PACKAGEVERSION}" \
	 && if [ ! -d "$${downloaddir}" ] ; then \
	        echo "Invalid download dir: $$downloaddir" && exit 1 ; fi \
	 && cd "$${downloaddir}" \
	 && srcname=$${packagebasename}-$${packageversion} \
	 && if [ ! -d "$$srcname" ] ; then \
	        echo "Error: download dir $$downloaddir does not contain: $$srcname" \
	         && exit 1 ; fi \
	 && tgzname=$${srcname}.tgz \
	 && tar fcz $${tgzname} $${srcname}
