# -*- makefile -*-
################################################################
####
#### Make include file for generating a modulefile
#### this file is included in Make.install Make.cbuild
####
################################################################

varsinfo ::
	@echo "make module varsfile [ LIBDIR=... (default ${LIBDIR}) ]"
info :: varsinfo
moreinfo :: varsinfo
	@echo "    [ MODULEDIR=... : custom module dir ]"
	@echo "    [ CMAKE_MODULEPATH_SET=... set cmake modulepath in the module ]"
	@echo "    [ CMAKEPREFIXPATHSET=... set cmake prefixpath in the module ]"
	@echo "    [ PKGCONFIG=....  (added to pkg_config_path relative to install) ]"
	@echo "    [ CMAKE_MODULEPATH_ADD=... ( same for cmake module path ) ]"

.PHONY: varsmodule varsmodulename
# I don't think this is used
varsmodulename :
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODULEROOT=${MODULEROOT} \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" \
	        "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" "${MODE}" \
	 && echo $${moduledir}/${PACKAGEVERSION}.lua
module varsmodule :
	@if [ -z "${MODULEROOT}" -a -z "${MODULEPATH}" ] ; then \
	    echo "Please set MODULEROOT or MODULEPATH variable" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	 && export prefixdir=$$( make --no-print-directory prefixdir \
	        INSTALLPATH=${INSTALLPATH} INSTALLROOT=${INSTALLROOT} \
	        INSTALLVARIANT=${INSTALLVARIANT} \
	        ) \
	 && packagenames "${PACKAGE}" "${PACKAGEVERSION}" "${PACKAGEBASENAME}" \
	 && modulenames "${MODULENAME}" \
	 && requirenonzero moduledir \
	 && echo "Using module dir: $$moduledir" \
	 && ${SUDO} mkdir -p $$moduledir \
	 && if [ ! -z "${PACKAGEMODULEVERSION}" ] ; then \
	        moduleversion=${PACKAGEMODULEVERSION} ; fi \
	 && if [ ! -z "${MODULEVERSIONEXTRA}" ] ; then \
	        moduleversion=$${moduleversion}-${MODULEVERSIONEXTRA} ; fi \
	 && ${SUDO} bash -c \
	      'echo "set ModulesVersion \"'$${moduleversion}'\"" >'$${moduledir}'/.version.'$${moduleversion} \
	 && modulefile=$${moduledir}/$${moduleversion}.lua \
	 && ${SUDO} bash -c 'rm -f '$${modulefile} \
	 && echo "Writing module file: $${modulefile}" \
	 && requirenonzero modulename \
	 && if [ ! -z "${MODULEVARNAME}" ] ; then \
	      export MODULENAME=$$( echo ${MODULEVARNAME} | tr a-z A-Z ) \
	    ; else \
	      export MODULENAME=$$( echo $$modulename | tr a-z A-Z ) \
	    ; fi \
	 && requirenonzero MODULENAME \
	 && export MODULENAMEALT=$$( echo ${MODULENAMEALT} | tr a-z A-Z ) \
	 && if [ ! -z "${INSTALLEXTRAPATH}" ] ; then \
	      export prefixdir=$${prefixdir}/${INSTALLEXTRAPATH} ; fi \
	 && if [ ! -z "${LIBDIR}" ] ; then \
	        export libdir=${LIBDIR} \
	         && notetoself "GDAL has both lib64 and lib; find lib64 first!" \
	    ; elif [ -d "$${prefixdir}/lib64" ] ; then \
	        echo "  found libdir=$${prefixdir}/lib64" \
	         && export libdir=lib64 \
	    ; elif [ -d "$${prefixdir}/lib" ] ; then \
	        echo "  found libdir=$${prefixdir}/lib" \
	         && export libdir=lib \
	    ; elif [ -z "${NOLIB}" ] ; then \
	        echo "No lib or lib64 found in prefixdir $${prefixdir}" \
	         && echo "specify LIBDIR or NOLIB" && exit 1 \
	    ; fi \
	 && if [ ! -z "${HASBIN}" ] ; then \
	      binstr=", TACC_$${PACKAGE}_BIN" ; fi \
	 && if [ ! -z "${INCLUDELOC}" ] ; then \
	      export includeloc=${INCLUDELOC} ; else export includeloc=include ; fi \
	 && ( \
	    for line in \
	        "local helpMsg = [[" ".." \
	        "Package: $${package}/$${moduleversion}"\
	        ".." \
	        "The $${package} modulefile defines the following variables:" \
	        "TACC_$${MODULENAME}_DIR, TACC_$${MODULENAME}_LIB, TACC_$${MODULENAME}_INC$${binstr}" \
	        $$( if [ ! -z "${URL}" ] ; then echo .. && echo "${URL}" ; fi ) \
	    ; do echo $$line ; done \
	     && if [ ! -z "${MODULE_HELP}" ] ; then \
	          echo ".." && make --no-print-directory module_help \
	        ; fi \
	     && requirenonzero prefixdir \
	     && for line in \
	            "]]" \
	            "help(helpMsg)" \
	            "" \
	        ; do echo "$$line" ; done \
	     && echo "" \
	     && echo 'setenv( \\\"TACC_$${MODULENAME}_DIR\\\",     \\\"'$${prefixdir}'\\\" )' \
	     && echo 'setenv( \\\"LMOD_$${MODULENAME}_DIR\\\",     \\\"'$${prefixdir}'\\\" )' \
	     && echo 'setenv( \\\"TACC_$${MODULENAME}_INC\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"$${includeloc}\\\")   )' \
	     && echo 'setenv( \\\"LMOD_$${MODULENAME}_INC\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"$${includeloc}\\\")   )' \
	     && if [ ! -z "$${MODULENAMEALT}" ] ; then \
	          echo 'setenv( \\\"TACC_$${MODULENAMEALT}_INC\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"$${includeloc}\\\")   )' \
	           && echo 'setenv( \\\"TACC_$${MODULENAMEALT}_DIR\\\",     \\\"$${prefixdir}\\\" )' \
	        ; fi \
	     && if [ -z "${NOLIB}" ] ; then \
	          echo 'setenv( \\\"TACC_$${MODULENAME}_LIB\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"$$libdir\\\")   )' \
	           && if [ ! -z "$${MODULENAMEALT}" ] ; then \
	                echo 'setenv( \\\"TACC_$${MODULENAMEALT}_LIB\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"$$libdir\\\")   )' \
	              ; fi \
	           && echo 'setenv( \\\"LMOD_$${MODULENAME}_LIB\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"$${libdir}\\\")   )' \
	           && echo 'prepend_path( \\\"LD_LIBRARY_PATH\\\",pathJoin(\\\"$${prefixdir}\\\",\\\"$${libdir}\\\")   )' \
	        ; fi \
	     && if [ ! -z "${HASBIN}" ] ; then \
	        if [ ! -z "${BINDIR}" ] ; then \
	            export bindir=${BINDIR} \
	          ; else export bindir=bin ; fi \
	         && echo 'prepend_path( \\\"PATH\\\",           pathJoin(\\\"$${prefixdir}\\\",\\\"'$${bindir}'\\\")   )' \
	         && echo 'setenv( \\\"LMOD_$${MODULENAME}_BIN\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"'$${bindir}'\\\")   )' \
	         && echo 'setenv( \\\"TACC_$${MODULENAME}_BIN\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"'$${bindir}'\\\")   )' \
	         && if [ ! -z "$${MODULENAMEALT}" ] ; then \
	              echo 'setenv( \\\"TACC_$${MODULENAMEALT}_BIN\\\",     pathJoin(\\\"$${prefixdir}\\\",\\\"$${bindir}\\\")   )' \
	            ; fi \
	        ; fi \
	     && if [ ! -z "${PKGCONFIGLIB}" ] ; then \
	            echo 'prepend_path( \\\"PKG_CONFIG_PATH\\\", \
	                  pathJoin( \\\"$${prefixdir}\\\",\\\"'$${libdir}'\\\",\\\"${PKGCONFIGLIB}\\\" ) )' \
	        ; elif [ ! -z "${PKGCONFIGABSOLUTE}" ] ; then \
	            echo 'prepend_path( \\\"PKG_CONFIG_PATH\\\", \
	                    \\\"${PKGCONFIGABSOLUTE}\\\" )' \
	        ; elif [ ! -z "${PKGCONFIG}" ] ; then \
	            echo 'prepend_path( \\\"PKG_CONFIG_PATH\\\", \
	                    pathJoin( \\\"$${prefixdir}\\\",\\\"${PKGCONFIG}\\\" ) )' \
	        ; fi \
	     && if [ ! -z "${CMAKE_MODULEPATH_SET}" ] ; then \
	          echo 'prepend_path( \\\"CMAKE_MODULE_PATH\\\", \
	                    pathJoin( \\\"$${prefixdir}\\\",\\\"${CMAKE_MODULEPATH_SET}\\\") )' \
	        ; fi \
	     && if [ ! -z "${CMAKEPREFIXPATHSET}" ] ; then \
	          echo 'prepend_path( \\\"CMAKE_PREFIX_PATH\\\", \
	                              \\\"$${prefixdir}\\\" \
	                            )' \
	        ; fi \
	     && if [ ! -z "${CMAKEPREFIXLIB}" ] ; then \
	          echo 'prepend_path( \\\"CMAKE_PREFIX_PATH\\\", \
	                    pathJoin( \\\"$${prefixdir}\\\" , \
	                        \\\"$${libdir}\\\" , \
	                        \\\"${CMAKEPREFIXLIB}\\\" \
	                        ) )' \
	        ; fi \
	     && if [ ! -z "${EXTRAVARS}" ] ; then \
	          for kv in ${EXTRAVARS} ; do \
	            export k=$$( echo $$kv | cut -d "=" -f 1 ) \
	             && export v=$$( echo $$kv | cut -d "=" -f 2 ) \
	             && echo "-- extra var $${k}=$${v}" \
	             && echo 'setenv( \\\"'$${k}'\\\", \\\"'$${v}'\\\" )' \
	          ; done \
	        ; fi \
	     && if [ ! -z "${EXTRAINSTALLVARS}" ] ; then \
	          for kv in ${EXTRAINSTALLVARS} ; do \
	            export k=$$( echo $$kv | cut -d "=" -f 1 ) \
	             && export v=$$( echo $$kv | cut -d "=" -f 2 ) \
	             && echo '-- extra prefixdir var '$$k'='$$v \
	             && echo 'setenv( \\\"'$$k'\\\", \\\"'$${prefixdir}'/'$${v}'\\\" )' \
	          ; done \
	        ; fi \
	     && echo "install paths: ${EXTRAINSTALLPATHS}" >/dev/null \
	     && if [ ! -z "${EXTRAINSTALLPATHS}" ] ; then \
	          for kv in ${EXTRAINSTALLPATHS} ; do \
	            export k=$$( echo $$kv | cut -d "=" -f 1 ) \
	             && export v=$$( echo $$kv | cut -d "=" -f 2 ) \
	             && echo "-- setting extra install dir var $$k=$$v" \
	             && echo 'prepend_path( \\\"'$${k}'\\\", \\\"'$${prefixdir}'/'$${v}'\\\" )' \
	          ; done \
	        ; fi \
	     && if [ ! -z "${FAMILY}" ] ; then \
	          echo 'family( \\\"${FAMILY}\\\" )' \
	        ; fi \
	     && if [ ! -z "${DEPENDSON}" ] ; then \
	          echo 'depends_on( \\\"${DEPENDSON}\\\" )' \
	        ; fi \
	) | xargs -I % ${SUDO} bash -c 'echo "%" >>'$${modulefile} \
	&& echo "written modulefile: $${modulefile}"

public :: module_public
.PHONY: module_public
module_public :
	@if [ -z "${MODULEROOT}" -a -z "${MODULEPATH}" ] ; then \
	    echo "Please set MODULEROOT or MODULEPATH variable" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	   && export MODULEROOT=${MODULEROOT} \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" "${MODE}" \
	 \
	 && echo "Opening up module dir: $$moduledir" \
	 && ${SUDO} chmod -R g+rX,o+rX $${moduledir}

