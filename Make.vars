# -*- makefile -*-
################################################################
####
#### Make include file for generating a modulefile
#### this file is included in Make.install Make.cbuild
####
################################################################

varsinfo ::
	@echo "make module varsfile [ LIBDIR=... (default ${LIBDIR}) ]"
info :: varsinfo
moreinfo :: varsinfo
	@echo "    [ MODULEDIR=... : custom module dir ]"
	@echo "    [ CMAKE_MODULEPATH_SET=... set cmake modulepath in the module ]"
	@echo "    [ CMAKE_PREFIXPATH_SET=... set cmake prefixpath in the module ]"
	@echo "    [ PKGCONFIG=....  (added to pkg_config_path relative to install) ]"
	@echo "    [ CMAKE_MODULEPATH_ADD=... ( same for cmake module path ) ]"

.PHONY: varsmodule varsmodulename
varsmodulename :
	@source ${MAKEINCLUDES}/names.sh \
	 && export MODE=${MODE} && export MODULEROOT=${MODULEROOT} \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" \
	 && echo $${moduledir}/${PACKAGEVERSION}.lua
module varsmodule :
	@if [ -z "${MODULEROOT}" -a -z "${MODULEPATH}" ] ; then \
	    echo "Please set MODULEROOT or MODULEPATH variable" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	   && export MODE=${MODE} && export MODULEROOT=${MODULEROOT} \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" "${MODULENAME}" \
	 \
	 && echo "Using module dir: $$moduledir" \
	 && mkdir -p $$moduledir \
	 && if [ ! -z "${MODULEVERSIONEXTRA}" ] ; then \
	        moduleversion=$${moduleversion}-${MODULEVERSIONEXTRA} ; fi \
	 && echo "set     ModulesVersion      \"$${moduleversion}\"" \
	    >$${moduledir}/.version.$${moduleversion} \
	 && modulefile=$${moduledir}/$${moduleversion}.lua && rm -f $${modulefile} \
	 && echo "Writing module file: $${modulefile}" \
	 && if [ -z "${BINDIR}" ] ; then binstr=", TACC_$${PACKAGE}_BIN" ; fi \
	 && requirenonzero modulename \
	 && export MODULENAME=$$( echo $$modulename | tr a-z A-Z ) \
	 && requirenonzero MODULENAME \
	 && for line in \
	        "local helpMsg = [[" ".." \
	        "Package: $${package}/$${moduleversion}"\
	        ".." \
	        "The $${package} modulefile defines the following variables:" \
	        "TACC_$${MODULENAME}_DIR, TACC_$${MODULENAME}_LIB, TACC_$${MODULENAME}_INC$${binstr}" \
	        $$( if [ ! -z "${URL}" ] ; then echo .. && echo "${URL}" ; fi ) \
	    ; do \
	        if [ "$$line" = ".." ] ; then echo ; else echo $$line ; fi \
	            >> $${modulefile} \
	    ; done \
	 && if [ ! -z "${MODULE_HELP}" ] ; then \
	      echo >> $${modulefile} \
	       && make --no-print-directory module_help MODULEFILE=$${modulefile} \
	    ; fi \
	 && for line in \
	        "]]" \
	        "help(helpMsg)" \
	        "" \
	    ; do \
	        echo $$line >> $${modulefile} \
	    ; done \
	 && if [ -z "${NOLIB}" ] ; then \
	      if [ -z "${LIBDIR}" ] ; then \
	        if [ -d "$${installdir}/lib" ] ; then \
	            libdir=lib \
	        ; elif [ -d "$${installdir}/lib64" ] ; then \
	            libdir=lib64 \
	        ; else \
	            echo "No lib or lib64 found in installdir $${installdir}" && exit 1 \
	        ; fi \
	      ; else libdir=${LIBDIR} ; fi \
	    ; fi \
	 && ( \
	    echo "" \
	     && if [ ! -z ${HASBIN} ] ; then \
	        echo "prepend_path( \"PATH\",           pathJoin(\"$${installdir}\",\"bin\")   )" \
	         && echo "setenv( \"LMOD_$${MODULENAME}_BIN\",     pathJoin(\"$${installdir}\",\"bin\")   )" \
	         && echo "setenv( \"TACC_$${MODULENAME}_BIN\",     pathJoin(\"$${installdir}\",\"bin\")   )" \
	         && if [ ! -z "${MODULENAMEALT}" ] ; then \
	              echo "setenv( \"TACC_${MODULENAMEALT}_BIN\",     pathJoin(\"$${installdir}\",\"bin\")   )" \
	            ; fi \
	        ; fi \
	     && echo "setenv( \"TACC_$${MODULENAME}_DIR\",     \"$${installdir}\" )" \
	     && echo "setenv( \"LMOD_$${MODULENAME}_DIR\",     \"$${installdir}\" )" \
	     && echo "setenv( \"TACC_$${MODULENAME}_INC\",     pathJoin(\"$${installdir}\",\"include\")   )" \
	     && echo "setenv( \"LMOD_$${MODULENAME}_INC\",     pathJoin(\"$${installdir}\",\"include\")   )" \
	     && if [ ! -z "${MODULENAMEALT}" ] ; then \
	          echo "setenv( \"TACC_${MODULENAMEALT}_INC\",     pathJoin(\"$${installdir}\",\"include\")   )" \
	           && echo "setenv( \"TACC_${MODULENAMEALT}_DIR\",     \"$${installdir}\" )" \
	        ; fi \
	     && if [ -z "${NOLIB}" ] ; then \
	          echo "setenv( \"TACC_$${MODULENAME}_LIB\",     pathJoin(\"$${installdir}\",\"$$libdir\")   )" \
	           && if [ ! -z "${MODULENAMEALT}" ] ; then \
	                echo "setenv( \"TACC_${MODULENAMEALT}_LIB\",     pathJoin(\"$${installdir}\",\"$$libdir\")   )" \
	              ; fi \
	           && echo "setenv( \"LMOD_$${MODULENAME}_LIB\",     pathJoin(\"$${installdir}\",\"$${libdir}\")   )" \
	           && echo "prepend_path( \"LD_LIBRARY_PATH\",pathJoin(\"$${installdir}\",\"$${libdir}\")   )" \
	        ; fi \
	    ) >>$${modulefile} \
	 && if [ ! -z "${PKGCONFIGLIB}" ] ; then \
	        echo "prepend_path( \"PKG_CONFIG_PATH\", \
	                pathJoin( \"$${installdir}\",\"$${libdir}\",\"${PKGCONFIGLIB}\" ) )" \
	    ; elif [ ! -z "${PKGCONFIGABSOLUTE}" ] ; then \
	        echo "prepend_path( \"PKG_CONFIG_PATH\", \
	                \"${PKGCONFIGABSOLUTE}\" )" \
	    ; elif [ ! -z "${PKGCONFIG}" ] ; then \
	        echo "prepend_path( \"PKG_CONFIG_PATH\", \
	                pathJoin( \"$${installdir}\",\"${PKGCONFIG}\" ) )" \
	    ; fi >>$${modulefile} \
	 && if [ ! -z "${CMAKE_MODULEPATH_SET}" ] ; then \
	      echo "prepend_path( \"CMAKE_MODULE_PATH\", \
	                pathJoin( \"$${installdir}\",\"${CMAKE_MODULEPATH_SET}\") )" \
	        >>$${modulefile} \
	    ; fi \
	 && echo "prepend_path( \"CMAKE_PREFIX_PATH\", \"$${installdir}\" )" \
	        >>$${modulefile} \
	 && if [ ! -z "${EXTRAVARS}" ] ; then \
	      for kv in ${EXTRAVARS} ; do \
	        export k=$$( echo $$kv | cut -d "=" -f 1 ) \
	         && export v=$$( echo $$kv | cut -d "=" -f 2 ) \
	         && echo "setting extra var $$k=$$v" \
	         && echo "setenv( \"$$k\", \"$$v\" )" >>$${modulefile} \
	      ; done \
	    ; fi \
	 && if [ ! -z "${EXTRAINSTALLVARS}" ] ; then \
	      for kv in ${EXTRAINSTALLVARS} ; do \
	        export k=$$( echo $$kv | cut -d "=" -f 1 ) \
	         && export v=$$( echo $$kv | cut -d "=" -f 2 ) \
	         && echo "setting extra install dir var $$k=$$v" \
	         && echo "setenv( \"$$k\", \"$${installdir}/$${v}\" )" >>$${modulefile} \
	      ; done \
	    ; fi \
	 && echo "install paths: ${EXTRAINSTALLPATHS}" \
	 && if [ ! -z "${EXTRAINSTALLPATHS}" ] ; then \
	      for kv in ${EXTRAINSTALLPATHS} ; do \
	        export k=$$( echo $$kv | cut -d "=" -f 1 ) \
	         && export v=$$( echo $$kv | cut -d "=" -f 2 ) \
	         && echo "setting extra install dir var $$k=$$v" \
	         && echo "prepend_path( \"$$k\", \"$${installdir}/$${v}\" )" >>$${modulefile} \
	      ; done \
	    ; fi \
	 && if [ ! -z "${FAMILY}" ] ; then \
	      echo "family(\"${FAMILY}\")" \
	        >>$${modulefile} \
	    ; fi \
	&& echo "written modulefile: $${modulefile}"

public ::
	@if [ -z "${MODULEROOT}" -a -z "${MODULEPATH}" ] ; then \
	    echo "Please set MODULEROOT or MODULEPATH variable" && exit 1 ; fi
	@source ${MAKEINCLUDES}/names.sh \
	   && export MODE=${MODE} && export MODULEROOT=${MODULEROOT} \
	 && setdirlognames "${PACKAGEROOT}" "${PACKAGE}" "${PACKAGEVERSION}" "${INSTALLEXT}" "${PACKAGEBASENAME}" "${VARIANT}" \
	 \
	 && echo "Opening up module dir: $$moduledir" \
	 && ${SUDO} chmod -R g+rX,o+rX $${moduledir}

.PHONY: varsfile
varsfile :
	@if [ -z "${VARSFILE}" ] ; then \
	    echo "Please set VARSFILE variable" && exit 1 ; fi \
	 && rm -f "${VARSFILE}" && touch "${VARSFILE}" \
	 && ( \
	    echo "# Installation variables for ${PACKAGE}" \
	     && echo "# Using CC=$$CC CXX=$$CXX FC=$$FC" \
	     && echo "# installation root:" \
	     && echo "export LMOD_${PACKAGE}_DIR=${INSTALLDIR}" \
	     && echo "# libraries dir:" \
	     && echo "export LMOD_${PACKAGE}_LIB=${LIBDIR}" \
	     && echo "# include dir:" \
	     && echo "export LMOD_${PACKAGE}_INC=${INCDIR}" \
	     && if [ ! -z "${PKGCONFIG}" ] ; then \
	          echo "# cmake pkgconf location:" \
	           && echo "export PKG_CONFIG_PATH=\$${PKG_CONFIG_PATH}:\$${LMOD_${PACKAGE}_DIR}/${PKGCONFIG}" \
	        ; fi \
	        ) \
	    ${VARSPROCESS} \
	    >>"${VARSFILE}"
